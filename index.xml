<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learn SQL by example on SQL by example</title><link>https://peyman.blog/sql/</link><description>Recent content in Learn SQL by example on SQL by example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>slh.peyman@gmail.com (Peyman Salehi)</managingEditor><webMaster>slh.peyman@gmail.com (Peyman Salehi)</webMaster><lastBuildDate>Mon, 01 Jan 2024 20:40:45 +0330</lastBuildDate><atom:link href="https://peyman.blog/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>Delete</title><link>https://peyman.blog/sql/posts/delete/</link><pubDate>Mon, 01 Jan 2024 20:40:45 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/delete/</guid><description>With DELETE we can delete one or multiple rows from a table.
PostgreSQL -- when you don&amp;#39;t provide a where condition with your delete it will -- delete all rows in your table -- Don&amp;#39;t run this query on your sample database, until you know what you&amp;#39;re doing DELETE FROM orders; -- delete all orders of a user with id of 10 DELETE FROM orders WHERE user_id = 12; Read more about Delete on PostgreSQL docs</description></item><item><title>Update</title><link>https://peyman.blog/sql/posts/update/</link><pubDate>Mon, 01 Jan 2024 20:11:38 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/update/</guid><description>By choosing one or multiple columns and add a condition we can update existing rows.
PostgreSQL -- set active column of all rows in `users` table -- when you don&amp;#39;t provide a where condition with your update it will -- update all rows in your table -- Don&amp;#39;t run this query on your sample database, until you know what you&amp;#39;re doing UPDATE users SET active = true; -- update first name and last name of a user based on his email UPDATE users SET first_name = &amp;#39;Jamie&amp;#39;, last_name = &amp;#39;Smith&amp;#39; WHERE email = &amp;#39;davidowen@brown.</description></item><item><title>Insert</title><link>https://peyman.blog/sql/posts/insert/</link><pubDate>Mon, 01 Jan 2024 19:43:54 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/insert/</guid><description>We can insert new rows into our tables by using INSERT statement.
PostgreSQL -- insert new row(user) into users table INSERT INTO users(datetime_joined, first_name, last_name, email, city, active) VALUES (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Moreno&amp;#39;, &amp;#39;sampleemil@email.com&amp;#39;, &amp;#39;Berlin&amp;#39;, true); -- insert multiple rows INSERT INTO users(datetime_joined, first_name, last_name, email, city, active) VALUES (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Moreno&amp;#39;, &amp;#39;sampleemil@email.com&amp;#39;, &amp;#39;Berlin&amp;#39;, true), (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;Brent&amp;#39;, &amp;#39;Cox&amp;#39;, &amp;#39;brentemail@email.com&amp;#39;, &amp;#39;Amsterdam&amp;#39;, true); -- by puting `RETURNING *` at the end of insert statement -- it returns inserted row back to you or show you in the console INSERT INTO users(datetime_joined, first_name, last_name, email, city, active) VALUES (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Moreno&amp;#39;, &amp;#39;sampleemil2@email.</description></item><item><title>Where</title><link>https://peyman.blog/sql/posts/where/</link><pubDate>Sat, 30 Dec 2023 23:17:01 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/where/</guid><description>With WHERE we can add a condition to our queries.
PostgreSQL -- query user with email of rmcconnell@yahoo.com SELECT first_name, last_name, email FROM users WHERE email = &amp;#39;rmcconnell@yahoo.com&amp;#39;; -- query orders by a user with id of 480 SELECT * FROM orders WHERE user_id = 480; -- query orders by created_at SELECT * FROM orders WHERE created_at &amp;gt; &amp;#39;2023-03-05 22:45:30&amp;#39;; Read more about Select and Where on PostgreSQL docs</description></item><item><title>Select</title><link>https://peyman.blog/sql/posts/select/</link><pubDate>Tue, 26 Dec 2023 23:41:25 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/select/</guid><description>By using SELECT statement we can reterive data from database. Here is some examples of fetching data with SELECT.
PostgreSQL Select first_name, last_name and email columns from users table
SELECT first_name, last_name, email FROM users; Output:
+-------------+-------------+---------------------------------------+ | first_name | last_name | email | |-------------+-------------+---------------------------------------| | Carmen | Malone | rmcconnell@yahoo.com | | Stephanie | Wallace | hjennings@curry.com | | Brandon | Jenkins | lrichardson@meadows-hodges.biz | ... Select all columns from users table</description></item><item><title>Create and Drop Table</title><link>https://peyman.blog/sql/posts/create-and-drop-table/</link><pubDate>Sun, 17 Sep 2023 01:06:01 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/create-and-drop-table/</guid><description>Create table By using CREATE TABLE statement you can create a new table.
PostgreSQL -- Create a table called users CREATE TABLE users ( id SERIAL PRIMARY KEY, -- auto increment primary key, handles 1 to 2,147,483,647 -- Or use BIGSERIAL that handles from up to 9,223,372,036,854,775,807 first_name VARCHAR NOT NULL, -- varchar column that can&amp;#39;t be null last_name VARCHAR (255), created_at TIMESTAMP, -- without time zone, updated_at TIMESTAMP WITH TIME ZONE, -- or use timestamptz code INTEGER, rate double precision, -- double precision floating-point number active BOOLEAN DEFAULT true, -- boolean with default value of true group_id INTEGER NOT NULL, -- PRIMARY KEY (col1, col2), make col1 and col2 as primary key FOREIGN KEY (group_id) REFERENCES groups (group_id) -- set foreign key on another table ); PostgreSQL create table</description></item><item><title>Create and Drop Database</title><link>https://peyman.blog/sql/posts/create-and-drop-database/</link><pubDate>Sun, 17 Sep 2023 00:50:10 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/create-and-drop-database/</guid><description>Create Database With CREATE DATABASE statement you can create a new database. PostgreSQL -- create a database called coffee CREATE DATABASE coffee; You can see more options to create a database in PostgreSQL docs
Remove database Use DROP DATABASE statement to remove a database. PostgreSQL -- drop a database called coffe DROP DATABASE coffee; -- Force to drop the database if anyone is connected to it DROP DATABASE coffee FORCE; -- Doesn&amp;#39;t thorw an error if database doesn&amp;#39;t exist DROP DATABASE IF EXISTS coffee; Drop database in PostgreSQL docs</description></item><item><title>Sample Database Structure</title><link>https://peyman.blog/sql/posts/sample-database-structure/</link><pubDate>Fri, 15 Sep 2023 16:23:58 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/sample-database-structure/</guid><description>This is an overview of sample database that you imported from setup post.
Overview We&amp;rsquo;re assuming that we have an eCommerce website and have some tables like, users, product_categories, products, orders, and user_logs.
Users table Users table have the following structure.
table name: users
column type id int datetime_joined datetime first_name varchar last_name varchar email varchar city varchar active boolean Sample data: id datetime_joined first_name last_name email city active 1 2023-03-07 12:45:12.</description></item><item><title>Setup</title><link>https://peyman.blog/sql/posts/setup/</link><pubDate>Fri, 15 Sep 2023 03:12:13 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/setup/</guid><description>If you want to run the examples in the following posts, you can follow these instructions to setup your environment and import our sample data to work with.
PostgreSQL If you have PostgreSQL installed, you can skip step 1.
1: Run PostgreSQL You can download and install docker and docker compose from docker website.
Create a docker-compose.yml file:
version: &amp;#39;3&amp;#39; services: postgres: image: postgres:latest environment: - POSTGRES_USER=sbe - POSTGRES_PASSWORD=sqlbyexample - POSTGRES_DB=sbe ports: - &amp;#34;5432:5432&amp;#34; volumes: - postgres_data:/var/lib/postgresql/data/ volumes: postgres_data: Then, run:</description></item><item><title>About</title><link>https://peyman.blog/sql/pages/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/pages/about/</guid><description>The idea of this project is to have a cheat sheet for SQL for different DBMSs like PostgreSQL and MySQL. If you find any issues or want to add more examples, feel free to open an issue or send a pull request in GitHub.
If you have any question you can be in touch with me: slh.peyman [at] gmail.com
My GitHub: peymanslh</description></item></channel></rss>