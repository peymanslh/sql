<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>modify on SQL by example</title><link>https://peyman.blog/sql/tags/modify/</link><description>Recent content in modify on SQL by example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>slh.peyman@gmail.com (Peyman Salehi)</managingEditor><webMaster>slh.peyman@gmail.com (Peyman Salehi)</webMaster><lastBuildDate>Mon, 01 Jan 2024 20:40:45 +0330</lastBuildDate><atom:link href="https://peyman.blog/sql/tags/modify/index.xml" rel="self" type="application/rss+xml"/><item><title>DELETE</title><link>https://peyman.blog/sql/posts/delete/</link><pubDate>Mon, 01 Jan 2024 20:40:45 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/delete/</guid><description>With DELETE we can delete one or multiple rows from a table.
-- when you don&amp;#39;t provide a where condition with your delete it will -- delete all rows in your table -- Don&amp;#39;t run this query on your sample database, until you know what you&amp;#39;re doing DELETE FROM orders; -- delete all orders of a user with id of 10 DELETE FROM orders WHERE user_id = 12; PostgreSQL docs</description></item><item><title>UPDATE</title><link>https://peyman.blog/sql/posts/update/</link><pubDate>Mon, 01 Jan 2024 20:11:38 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/update/</guid><description>By choosing one or multiple columns and add a condition we can update existing rows.
-- set active column of all rows in `users` table -- when you don&amp;#39;t provide a where condition with your update it will -- update all rows in your table -- Don&amp;#39;t run this query on your sample database, until you know what you&amp;#39;re doing UPDATE users SET active = true; -- update first name and last name of a user based on his email UPDATE users SET first_name = &amp;#39;Jamie&amp;#39;, last_name = &amp;#39;Smith&amp;#39; WHERE email = &amp;#39;davidowen@brown.</description></item><item><title>INSERT</title><link>https://peyman.blog/sql/posts/insert/</link><pubDate>Mon, 01 Jan 2024 19:43:54 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/insert/</guid><description>We can insert new rows into our tables by using INSERT statement.
-- insert new row(user) into users table INSERT INTO users(datetime_joined, first_name, last_name, email, city, active) VALUES (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Moreno&amp;#39;, &amp;#39;sampleemil@email.com&amp;#39;, &amp;#39;Berlin&amp;#39;, true); -- insert multiple rows INSERT INTO users(datetime_joined, first_name, last_name, email, city, active) VALUES (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Moreno&amp;#39;, &amp;#39;sampleemil@email.com&amp;#39;, &amp;#39;Berlin&amp;#39;, true), (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;Brent&amp;#39;, &amp;#39;Cox&amp;#39;, &amp;#39;brentemail@email.com&amp;#39;, &amp;#39;Amsterdam&amp;#39;, true); -- by puting `RETURNING *` at the end of insert statement -- it returns inserted row back to you or show you in the console INSERT INTO users(datetime_joined, first_name, last_name, email, city, active) VALUES (&amp;#39;2024-01-01 20:20:33&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Moreno&amp;#39;, &amp;#39;sampleemil2@email.</description></item></channel></rss>