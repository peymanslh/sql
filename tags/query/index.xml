<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>query on SQL by example</title><link>https://peyman.blog/sql/tags/query/</link><description>Recent content in query on SQL by example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>slh.peyman@gmail.com (Peyman Salehi)</managingEditor><webMaster>slh.peyman@gmail.com (Peyman Salehi)</webMaster><lastBuildDate>Wed, 03 Jan 2024 23:55:35 +0330</lastBuildDate><atom:link href="https://peyman.blog/sql/tags/query/index.xml" rel="self" type="application/rss+xml"/><item><title>ORDER BY</title><link>https://peyman.blog/sql/posts/order-by/</link><pubDate>Wed, 03 Jan 2024 23:55:35 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/order-by/</guid><description>In a select query, after choosing the columns and adding some conditions we can choose the ordering of the output data based on a columns which can be an integer, datetime or some other kinds of sortable data types.
By adding ORDER BY we can sort the output.
-- list orders and sort them by total_price -- this will list them from lowest to highest SELECT id, order_code, quantity, total_price FROM orders ORDER BY total_price; -- +------+--------------------------------------+----------+-------------+ -- | id | order_code | quantity | total_price | -- |------+--------------------------------------+----------+-------------| -- | 917 | 27fdbd2b-1fa0-4633-ac2f-1f007fd9d6e2 | 1 | 200 | -- | 266 | 95b02f2a-bedd-4ad5-b767-3854cb886ef9 | 1 | 201 | -- | 871 | e232f447-4bae-4c45-b4d2-87663217df0a | 1 | 206 | -- | 89 | b2c93d87-0169-4152-986e-ee3fa20ff50c | 1 | 210 | -- | 200 | a7a612cd-6f1d-4844-b19c-d588530863fb | 1 | 211 | -- .</description></item><item><title>WHERE</title><link>https://peyman.blog/sql/posts/where/</link><pubDate>Sat, 30 Dec 2023 23:17:01 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/where/</guid><description>With WHERE we can add a condition to our queries and filter the output based on that condition.
-- get user with email of rmcconnell@yahoo.com SELECT first_name, last_name, email FROM users WHERE email = &amp;#39;rmcconnell@yahoo.com&amp;#39;; -- +------------+-----------+----------------------+ -- | first_name | last_name | email | -- |------------+-----------+----------------------| -- | Carmen | Malone | rmcconnell@yahoo.com | -- +------------+-----------+----------------------+ -- get all orders by a user with id of 480 SELECT * FROM orders WHERE user_id = 480; -- +-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- | id | created_at | order_code | product_id | user_id | quantity | total_price | delivered | -- |-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------| -- | 1 | 2022-10-08 17:50:42 | 28e9fe61-8883-4933-bc48-b4cd292cf501 | 17 | 480 | 6 | 2532 | True | -- | 521 | 2022-07-27 23:54:24 | a18c367c-9939-4414-bb1e-48afe8cdf565 | 74 | 480 | 3 | 1440 | True | -- | 873 | 2023-03-05 22:45:30 | 150ff85f-67d2-4e0b-a76c-f2450b2db6a3 | 6 | 480 | 1 | 403 | True | -- +-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- query orders which their created_at is greater than 2023-03-05 22:45:30 SELECT * FROM orders WHERE created_at &amp;gt; &amp;#39;2023-03-05 22:45:30&amp;#39;; -- +------+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- | id | created_at | order_code | product_id | user_id | quantity | total_price | delivered | -- |------+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------| -- | 2 | 2023-08-08 20:19:34 | c01b34e3-9db0-49ae-85b7-1efd16f0549d | 79 | 492 | 10 | 2370 | True | -- | 3 | 2023-08-15 05:16:22 | 4eefdca1-a8cb-446e-8b53-d3fe8f4c53b3 | 51 | 402 | 6 | 2064 | True | -- | 4 | 2023-09-11 19:20:27 | c16fa5cd-bd61-4771-9b52-fddc8adb8190 | 53 | 468 | 3 | 855 | True | -- | 5 | 2023-07-24 00:49:53 | fb6c3f59-eca6-4827-8d16-60d56bae3a5b | 145 | 276 | 5 | 2340 | True | -- | 6 | 2023-08-03 21:05:06 | c59628e4-9c10-44ef-a423-cd01edb73580 | 150 | 315 | 5 | 1345 | True | -- | 10 | 2023-07-28 03:23:57 | 42a8eff9-1c77-4527-9b5b-3eefba1da7f6 | 102 | 426 | 5 | 1565 | True | -- .</description></item><item><title>SELECT</title><link>https://peyman.blog/sql/posts/select/</link><pubDate>Tue, 26 Dec 2023 23:41:25 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/select/</guid><description>By using SELECT statement we can reterive data from database. Here is some examples of fetching data with SELECT.
-- select first_name, last_name and email columns from users table SELECT first_name, last_name, email FROM users; -- +-------------+-------------+---------------------------------------+ -- | first_name | last_name | email | -- |-------------+-------------+---------------------------------------| -- | Carmen | Malone | rmcconnell@yahoo.com | -- | Stephanie | Wallace | hjennings@curry.com | -- | Brandon | Jenkins | lrichardson@meadows-hodges.biz | -- .</description></item></channel></rss>