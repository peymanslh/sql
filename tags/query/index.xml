<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>query on SQL by example</title><link>https://peyman.blog/sql/tags/query/</link><description>Recent content in query on SQL by example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>slh.peyman@gmail.com (Peyman Salehi)</managingEditor><webMaster>slh.peyman@gmail.com (Peyman Salehi)</webMaster><lastBuildDate>Mon, 05 Feb 2024 11:17:10 +0330</lastBuildDate><atom:link href="https://peyman.blog/sql/tags/query/index.xml" rel="self" type="application/rss+xml"/><item><title>LIKE</title><link>https://peyman.blog/sql/posts/like/</link><pubDate>Mon, 05 Feb 2024 11:17:10 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/like/</guid><description>LIKE is use in WHERE condition to find data based on a pattern.
There are two wildcards that we can use with LIKE:
%: represents zero, one, or multiple characters _: represents one, single character. -- find all users with first_name of John SELECT id, first_name, last_name FROM users WHERE first_name LIKE &amp;#39;John&amp;#39;; -- +-----+------------+-----------+ -- | id | first_name | last_name | -- |-----+------------+-----------| -- | 14 | John | Combs | -- | 51 | John | Fritz | -- | 285 | John | Sanders | -- | 445 | John | Wise | -- | 485 | John | Peterson | -- | 501 | John | Moreno | -- | 502 | John | Moreno | -- +-----+------------+-----------+ -- find all users that their first_name starts with A SELECT id, first_name, last_name FROM users WHERE first_name LIKE &amp;#39;A%&amp;#39;; -- +-----+------------+-----------+ -- | id | first_name | last_name | -- |-----+------------+-----------| -- | 13 | Andrew | Mercado | -- | 42 | Adrian | Ewing | -- | 74 | Audrey | Edwards | -- find all users that their first_name ends with n SELECT id, first_name, last_name FROM users WHERE first_name LIKE &amp;#39;%n&amp;#39;; -- +-----+------------+-----------+ -- | id | first_name | last_name | -- |-----+------------+-----------| -- | 1 | Carmen | Malone | -- | 3 | Brandon | Jenkins | -- | 7 | Jocelyn | Williams | -- | 10 | Steven | Perez | -- .</description></item><item><title>AS</title><link>https://peyman.blog/sql/posts/as/</link><pubDate>Mon, 05 Feb 2024 11:01:38 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/as/</guid><description>AS keyword is use to make an alias for a column name.
SELECT COUNT(id), AVG(total_price), user_id FROM orders GROUP BY user_id; -- V V -- +-------+-----------------------+---------+ -- | count | avg | user_id | -- |-------+-----------------------+---------| -- | 1 | 2220.0000000000000000 | 384 | -- | 3 | 1319.3333333333333333 | 351 | -- Use alias for count and avg columns SELECT COUNT(id) as number_of_orders, AVG(total_price) avg_total_price, user_id FROM orders GROUP BY user_id; -- V V -- +------------------+-----------------------+---------+ -- | number_of_orders | avg_total_price | user_id | -- |------------------+-----------------------+---------| -- | 1 | 2220.</description></item><item><title>COUNT, SUM, AVG</title><link>https://peyman.blog/sql/posts/count-sum-avg/</link><pubDate>Sun, 04 Feb 2024 13:45:07 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/count-sum-avg/</guid><description>COUNT returns the number of rows for a column.
-- return the number of all users SELECT COUNT(*) FROM users; -- +-------+ -- | count | -- |-------| -- | 502 | -- +-------+ -- find the number of orders by each user SELECT COUNT(*), user_id FROM orders GROUP BY user_id ORDER BY user_id; -- +-------+---------+ -- | count | user_id | -- |-------+---------| -- | 2 | 1 | -- | 1 | 2 | -- | 3 | 3 | -- | 4 | 4 | -- .</description></item><item><title>MIN, MAX</title><link>https://peyman.blog/sql/posts/min-max/</link><pubDate>Sat, 03 Feb 2024 15:49:57 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/min-max/</guid><description>MIN returns the smallest value of a column. MAX returns the biggest value of a column.
-- return the lowest total_price from orders of user with id of 10 SELECT MIN(total_price) FROM orders WHERE user_id = 10; -- +------+ -- | min | -- |------| -- | 1132 | -- +------+ -- return the highest total_price from the orders of user with id of 10 SELECT MAX(total_price) FROM orders WHERE user_id = 10; -- +------+ -- | max | -- |------| -- | 1998 | -- +------+ PostgreSQL docs</description></item><item><title>Comment</title><link>https://peyman.blog/sql/posts/comment/</link><pubDate>Sat, 03 Feb 2024 15:11:15 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/comment/</guid><description>When you writing multiline SQL queries you can use -- to comment a single line and use /* */ to comment multiline texts.
-- Single line comment /* Multi line comment */</description></item><item><title>LIMIT</title><link>https://peyman.blog/sql/posts/limit/</link><pubDate>Fri, 02 Feb 2024 15:09:44 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/limit/</guid><description>When the number of rows in a select query are a lot, we can limit them by the LIMIT statement.
-- only return 3 item SELECT * FROM users LIMIT 3; -- +----+---------------------+------------+-----------+--------------------------------+----------------+--------+ -- | id | datetime_joined | first_name | last_name | email | city | active | -- |----+---------------------+------------+-----------+--------------------------------+----------------+--------| -- | 1 | 2023-08-18 21:44:13 | Carmen | Malone | rmcconnell@yahoo.com | East Jeanmouth | True | -- | 2 | 2023-07-27 04:31:11 | Stephanie | Wallace | hjennings@curry.</description></item><item><title>AND, OR, NOT</title><link>https://peyman.blog/sql/posts/and-or-not/</link><pubDate>Fri, 02 Feb 2024 14:18:01 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/and-or-not/</guid><description>With the help of AND, OR, and NOT we can add more power to our query conditions.
-- select all orders with product_id of 10 and delivered -- only select rows where both conditions are true SELECT * FROM orders WHERE product_id = &amp;#39;10&amp;#39; AND delivered = true; -- +-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- | id | created_at | order_code | product_id | user_id | quantity | total_price | delivered | -- |-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------| -- | 113 | 2023-07-08 21:09:44 | 12f82968-46fc-4118-9c58-fb568c38fa4e | 10 | 343 | 1 | 445 | True | -- | 121 | 2023-06-03 00:18:42 | 24d070f9-2e4b-4b41-8d76-c99167083405 | 10 | 239 | 8 | 3560 | True | -- | 487 | 2023-07-04 06:34:56 | 23da1388-e818-48af-ab5b-bc14951a22e0 | 10 | 41 | 5 | 2225 | True | -- | 774 | 2023-04-20 09:35:38 | 07bbf026-ef4f-4078-a919-48702af47cb0 | 10 | 67 | 3 | 1335 | True | -- +-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- select all users where their first or last name is John -- select rows where only one of the conditions are true SELECT * FROM users WHERE first_name = &amp;#39;John&amp;#39; OR last_name = &amp;#39;John&amp;#39;; -- +-----+---------------------+------------+-----------+------------------------------+-----------------+--------+ -- | id | datetime_joined | first_name | last_name | email | city | active | -- |-----+---------------------+------------+-----------+------------------------------+-----------------+--------| -- | 14 | 2022-12-18 03:47:51 | John | Combs | katherinewiley@myers.</description></item><item><title>GROUP BY</title><link>https://peyman.blog/sql/posts/group-by/</link><pubDate>Fri, 12 Jan 2024 15:40:37 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/group-by/</guid><description>GROUP BY comblines the output into groups of rows that matches on one or multiple values. Also, GROUP BY usually used with aggregate functions like COUNT, MIN, MAX, SUM, and AVG.
-- count number of products for each company SELECT COUNT(id), company FROM products GROUP BY company; -- +-------+---------------------------------+ -- | count | company | -- |-------+---------------------------------| -- | 1 | Edwards, Fox and Valentine | -- | 2 | Hale-Bryan | -- | 1 | Alexander Inc | -- | 1 | Stark and Sons | -- | 2 | Martin, Baker and Henderson | -- .</description></item><item><title>ORDER BY</title><link>https://peyman.blog/sql/posts/order-by/</link><pubDate>Wed, 03 Jan 2024 23:55:35 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/order-by/</guid><description>In a select query, after choosing the columns and adding some conditions we can choose the ordering of the output data based on a columns which can be an integer, datetime or some other kinds of sortable data types.
By adding ORDER BY we can sort the output.
-- list orders and sort them by total_price -- this will list them from lowest to highest SELECT id, order_code, quantity, total_price FROM orders ORDER BY total_price; -- +------+--------------------------------------+----------+-------------+ -- | id | order_code | quantity | total_price | -- |------+--------------------------------------+----------+-------------| -- | 917 | 27fdbd2b-1fa0-4633-ac2f-1f007fd9d6e2 | 1 | 200 | -- | 266 | 95b02f2a-bedd-4ad5-b767-3854cb886ef9 | 1 | 201 | -- | 871 | e232f447-4bae-4c45-b4d2-87663217df0a | 1 | 206 | -- | 89 | b2c93d87-0169-4152-986e-ee3fa20ff50c | 1 | 210 | -- | 200 | a7a612cd-6f1d-4844-b19c-d588530863fb | 1 | 211 | -- .</description></item><item><title>WHERE</title><link>https://peyman.blog/sql/posts/where/</link><pubDate>Sat, 30 Dec 2023 23:17:01 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/where/</guid><description>With WHERE we can add a condition to our queries and filter the output based on that condition.
-- get user with email of rmcconnell@yahoo.com SELECT first_name, last_name, email FROM users WHERE email = &amp;#39;rmcconnell@yahoo.com&amp;#39;; -- +------------+-----------+----------------------+ -- | first_name | last_name | email | -- |------------+-----------+----------------------| -- | Carmen | Malone | rmcconnell@yahoo.com | -- +------------+-----------+----------------------+ -- get all orders by a user with id of 480 SELECT * FROM orders WHERE user_id = 480; -- +-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- | id | created_at | order_code | product_id | user_id | quantity | total_price | delivered | -- |-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------| -- | 1 | 2022-10-08 17:50:42 | 28e9fe61-8883-4933-bc48-b4cd292cf501 | 17 | 480 | 6 | 2532 | True | -- | 521 | 2022-07-27 23:54:24 | a18c367c-9939-4414-bb1e-48afe8cdf565 | 74 | 480 | 3 | 1440 | True | -- | 873 | 2023-03-05 22:45:30 | 150ff85f-67d2-4e0b-a76c-f2450b2db6a3 | 6 | 480 | 1 | 403 | True | -- +-----+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- query orders which their created_at is greater than 2023-03-05 22:45:30 SELECT * FROM orders WHERE created_at &amp;gt; &amp;#39;2023-03-05 22:45:30&amp;#39;; -- +------+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------+ -- | id | created_at | order_code | product_id | user_id | quantity | total_price | delivered | -- |------+---------------------+--------------------------------------+------------+---------+----------+-------------+-----------| -- | 2 | 2023-08-08 20:19:34 | c01b34e3-9db0-49ae-85b7-1efd16f0549d | 79 | 492 | 10 | 2370 | True | -- | 3 | 2023-08-15 05:16:22 | 4eefdca1-a8cb-446e-8b53-d3fe8f4c53b3 | 51 | 402 | 6 | 2064 | True | -- | 4 | 2023-09-11 19:20:27 | c16fa5cd-bd61-4771-9b52-fddc8adb8190 | 53 | 468 | 3 | 855 | True | -- | 5 | 2023-07-24 00:49:53 | fb6c3f59-eca6-4827-8d16-60d56bae3a5b | 145 | 276 | 5 | 2340 | True | -- | 6 | 2023-08-03 21:05:06 | c59628e4-9c10-44ef-a423-cd01edb73580 | 150 | 315 | 5 | 1345 | True | -- | 10 | 2023-07-28 03:23:57 | 42a8eff9-1c77-4527-9b5b-3eefba1da7f6 | 102 | 426 | 5 | 1565 | True | -- .</description></item><item><title>SELECT</title><link>https://peyman.blog/sql/posts/select/</link><pubDate>Tue, 26 Dec 2023 23:41:25 +0330</pubDate><author>slh.peyman@gmail.com (Peyman Salehi)</author><guid>https://peyman.blog/sql/posts/select/</guid><description>By using SELECT statement we can reterive data from database. Here is some examples of fetching data with SELECT.
-- select first_name, last_name and email columns from users table SELECT first_name, last_name, email FROM users; -- +-------------+-------------+---------------------------------------+ -- | first_name | last_name | email | -- |-------------+-------------+---------------------------------------| -- | Carmen | Malone | rmcconnell@yahoo.com | -- | Stephanie | Wallace | hjennings@curry.com | -- | Brandon | Jenkins | lrichardson@meadows-hodges.biz | -- .</description></item></channel></rss>